import { GoogleGenerativeAI, GoogleGenerativeAIError } from '@google/generative-ai';
import toast from 'react-hot-toast';
import * as Sentry from '@sentry/react';

/**
 * Interface for Quantum Personality
 * @interface QuantumPersonality
 */
export interface QuantumPersonality {
  id: string;
  name: string;
  age: number;
  type: 'past' | 'present' | 'future' | 'parallel';
  systemPrompt: string;
  traits: string[];
  communicationStyle: string;
  language?: string;
}

/**
 * Knowledge base for RAG in Quantum Self AI
 * @constant QUANTUM_SELF_KNOWLEDGE_BASE
 */
const QUANTUM_SELF_KNOWLEDGE_BASE = {
  app_context: {
    name: "Quantum Self AI",
    purpose: "Application r√©volutionnaire pour converser avec toutes vos versions quantiques",
    technology: "IA conversationnelle ElevenLabs, Gemini AI, Tavus avatars",
    concept: "Exploration de diff√©rentes versions de soi √† travers le temps et les dimensions parall√®les"
  },
  quantum_versions: {
    past: "Versions plus jeunes pleines d'√©nergie et d'optimisme, repr√©sentant les r√™ves et l'audace",
    present: "Version optimis√©e et √©quilibr√©e du moment pr√©sent, pragmatique et centr√©e",
    future: "Versions sages avec l'exp√©rience et le recul, bienveillantes et patientes",
    parallel: "Versions alternatives qui ont pris des chemins diff√©rents (succ√®s, zen, cr√©atif, etc.)"
  },
  conversation_guidelines: {
    stay_in_character: "Toujours rester dans le personnage de la version quantique",
    reference_app: "Faire r√©f√©rence √† l'exp√©rience Quantum Self AI quand appropri√©",
    encourage_exploration: "Encourager l'utilisateur √† explorer d'autres versions quantiques",
    personal_growth: "Orienter vers la croissance personnelle et l'introspection",
    quantum_wisdom: "Partager des perspectives uniques bas√©es sur l'√¢ge/exp√©rience de la version"
  },
  features: {
    voice_cloning: "Clonage vocal ElevenLabs pour des r√©ponses audio personnalis√©es",
    video_avatars: "Avatars vid√©o Tavus pour des conversations visuelles",
    biometric_analysis: "Analyse biom√©trique Pica pour personnaliser les versions",
    emotional_weather: "Suivi de l'√©tat √©motionnel et de la m√©t√©o int√©rieure",
    insights: "G√©n√©ration d'insights personnalis√©s bas√©s sur les conversations"
  }
};

/**
 * Service class for handling Gemini AI interactions
 * @class GeminiService
 */
export class GeminiService {
  private static readonly API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
  private static genAI: GoogleGenerativeAI | null = null;
  private static requestQueue: Promise<any> = Promise.resolve();
  private static readonly MAX_RESPONSE_LENGTH = 2048; // Max characters for responses
  private static readonly MAX_HISTORY_ITEMS = 5; // Max conversation history items

  /**
   * Initializes or returns the Gemini client
   * @private
   * @returns {GoogleGenerativeAI | null} The Gemini client or null in simulation mode
   */
  private static getClient(): GoogleGenerativeAI | null {
    if (!this.API_KEY || this.API_KEY === 'your_gemini_api_key_here') {
      console.warn('‚ùå Gemini API key not configured, using simulation mode');
      toast('üß† Simulation mode activated - No API key');
      return null;
    }

    if (!this.genAI) {
      try {
        this.genAI = new GoogleGenerativeAI(this.API_KEY);
        console.log('‚úÖ Gemini AI client initialized');
      } catch (error) {
        Sentry.captureException(error);
        console.error('‚ùå Error initializing Gemini:', error);
        toast.error('‚ùå Failed to initialize Gemini client');
        return null;
      }
    }
    
    return this.genAI;
  }

  /**
   * Queues API requests to prevent concurrent issues
   * @private
   * @param fn - The async function to queue
   * @returns The result of the queued function
   */
  private static async queueRequest<T>(fn: () => Promise<T>): Promise<T> {
    this.requestQueue = this.requestQueue.then(() => fn());
    return this.requestQueue;
  }

  /**
   * Checks if API quota is available
   * @private
   * @returns {Promise<boolean>} True if quota is available
   */
  private static async checkQuota(): Promise<boolean> {
    const client = this.getClient();
    if (!client) return false;

    try {
      // Note: Gemini API does not provide a direct quota check, using test request
      const model = client.getGenerativeModel({ model: "gemini-1.5-flash" });
      await model.generateContent("Quota check");
      return true;
    } catch (error: any) {
      Sentry.captureException(error);
      console.warn('Quota check failed:', error);
      return false;
    }
  }

  /**
   * Tests the connection to Gemini AI
   * @returns {Promise<boolean>} True if connection is successful
   */
  static async testConnection(): Promise<boolean> {
    return this.queueRequest(async () => {
      const client = this.getClient();
      
      if (!client) {
        console.warn('‚ùå GeminiÔºÅclient not available');
        toast.error('‚ùå Gemini connection failed - Check API key');
        return false;
      }

      try {
        console.log('üß™ Testing Gemini connection...');
        const model = client.getGenerativeModel({ model: "gemini-1.5-flash" });
        const result = await model.generateContent("Test de connexion. R√©ponds simplement 'Connexion r√©ussie'.");
        const response = await result.response;
        const text = response.text();
        
        console.log('‚úÖ Gemini test successful:', text);
        toast.success('üß† Gemini AI connected successfully!');
        return text.includes('Connexion r√©ussie');
      } catch (error: any) {
        let message = 'Error connecting to Gemini';
        if (error instanceof GoogleGenerativeAIError) {
          if (error.status === 429) message = 'Quota limit reached';
          else if (error.status === 401) message = 'Invalid API key';
        }
        Sentry.captureException(error);
        console.error(`‚ùå ${message}:`, error);
        toast.error(`‚ùå ${message}`);
        return false;
      }
    });
  }

  /**
   * Enriches context with RAG knowledge base
   * @private
   * @param message - The user message
   * @param personality - The quantum personality
   * @returns {string} The enriched context
   */
  private static enrichContextWithRAG(message: string, personality: QuantumPersonality): string {
    if (!message || !personality) return '';

    const relevantContext = [];
    const language = personality.language || 'fr';
    
    relevantContext.push(`CONTEXTE QUANTUM SELF AI: ${QUANTUM_SELF_KNOWLEDGE_BASE.app_context.purpose}`);
    
    const versionInfo = QUANTUM_SELF_KNOWLEDGE_BASE.quantum_versions[personality.type];
    if (versionInfo) {
      relevantContext.push(`TON R√îLE: ${versionInfo}`);
    }
    
    relevantContext.push(`GUIDELINES: ${Object.values(QUANTUM_SELF_KNOWLEDGE_BASE.conversation_guidelines).join('. ')}`);
    
    const appKeywords = ['quantum self', 'application', 'app', 'fonctionnalit√©', 'comment √ßa marche', 'elevenlabs', 'tavus', 'versions quantiques'];
    const isAppQuestion = appKeywords.some(keyword => message.toLowerCase().includes(keyword));
    
    if (isAppQuestion) {
      relevantContext.push(`FONCTIONNALIT√âS APP: ${Object.entries(QUANTUM_SELF_KNOWLEDGE_BASE.features)
        .map(([key, value]) => `${key}: ${value}`)
        .join('. ')}`);
    }

    return relevantContext.join('\n\n');
  }

  /**
   * Generates quantum personalities based on user profile
   * @param userProfile - The user profile
   * @returns {Promise<QuantumPersonality[]>} The generated personalities
   */
  static async generateQuantumPersonalities(userProfile: any): Promise<QuantumPersonality[]> {
    return this.queueRequest(async () => {
      const client = this.getClient();
      
      if (!client || !userProfile) {
        console.warn('‚ùå Simulation mode - Default personalities');
        toast('ü§ñ Simulation mode activated for personalities');
        return this.getDefaultPersonalities();
      }

      if (!(await this.checkQuota())) {
        toast.error('üß† Quota exceeded, simulation mode activated');
        return this.getDefaultPersonalities();
      }

      try {
        const model = client.getGenerativeModel({ 
          model: "gemini-1.5-flash",
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: this.MAX_RESPONSE_LENGTH,
          }
        });

        const ragContext = `
          CONTEXTE QUANTUM SELF AI:
          ${QUANTUM_SELF_KNOWLEDGE_BASE.app_context.purpose}
          
          TYPES DE VERSIONS QUANTIQUES:
          ${Object.entries(QUANTUM_SELF_KNOWLEDGE_BASE.quantum_versions)
            .map(([type, desc]) => `${type}: ${desc}`)
            .join('\n')}
        `;

        const prompt = `
          ${ragContext}
          
          Bas√© sur ce profil utilisateur, g√©n√®re 5 personnalit√©s quantiques distinctes en JSON valide :
          
          Profil utilisateur :
          - Nom: ${userProfile.name || 'Utilisateur'}
          - √Çge estim√©: ${userProfile.age || 30}
          - R√™ves: ${userProfile.questionnaire?.dreams || 'R√©aliser son potentiel'}
          - Peurs: ${userProfile.questionnaire?.fears || 'Ne pas saisir les opportunit√©s'}
          - Valeurs: ${userProfile.questionnaire?.values || 'Authenticit√©, croissance'}
          - Motivation: ${userProfile.questionnaire?.motivation || 'Impact positif'}
          
          G√©n√®re exactement 5 versions avec cette structure JSON :
          [
            {
              "id": "young-self",
              "name": "Toi √† 16 ans",
              "age": 16,
              "type": "past",
              "systemPrompt": "Tu es la version de 16 ans optimiste et audacieuse dans l'univers Quantum Self AI...",
              "traits": ["optimiste", "curieux", "audacieux"],
              "communicationStyle": "Enthousiaste et encourageant",
              "language": "fr"
            }
          ]
          
          Les 5 versions doivent √™tre :
          1. Pass√© Motiv√© (16 ans) - type: "past"
          2. Pr√©sent Optimis√© (30 ans) - type: "present"  
          3. Futur Sage (60 ans) - type: "future"
          4. Parall√®le Success (35 ans) - type: "parallel"
          5. Parall√®le Zen (40 ans) - type: "parallel"
          
          IMPORTANT: Chaque systemPrompt doit inclure une r√©f√©rence √† Quantum Self AI et encourager l'exploration des autres versions.
          R√©ponds en ${userProfile.language || 'fran√ßais'}.
          
          R√©ponds UNIQUEMENT avec le JSON valide, sans texte suppl√©mentaire.
        `;

        console.log('üß† Sending request to Gemini...');
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const content = response.text();
        
        if (!content) {
          throw new Error('No response from Gemini');
        }

        console.log('üìù Gemini response received:', content.substring(0, 200) + '...');
        const cleanContent = content.replace(/```json\n?|\n?```/g, '').trim();
        const personalities = JSON.parse(cleanContent);
        
        console.log('‚úÖ Parsed personalities:', personalities.length);
        toast.success('‚ú® Personalities generated with RAG!');
        return personalities;
      } catch (error: any) {
        let message = 'Error generating personalities';
        if (error instanceof GoogleGenerativeAIError) {
          if (error.status === 429) message = 'Quota limit reached';
          else if (error.status === 401) message = 'Invalid API key';
          else if (error.status === 400) message = 'Invalid input';
        }
        Sentry.captureException(error);
        console.error(`‚ùå ${message}:`, error);
        toast.error(`‚ùå ${message}, using fallback`);
        return this.getDefaultPersonalities();
      }
    });
  }

  /**
   * Generates a response for a quantum personality
   * @param message - The user message
   * @param personality - The quantum personality
   * @param conversationHistory - The recent conversation history
   * @returns {Promise<string>} The generated response
   */
  static async generateResponse(
    message: string,
    personality: QuantumPersonality,
    conversationHistory: any[]
  ): Promise<string> {
    return this.queueRequest(async () => {
      const client = this.getClient();
      
      if (!client || !message || !personality) {
        console.warn('‚ùå Simulation mode - Default response');
        toast('ü§ñ Simulation mode activated for response');
        return this.getDefaultResponse(message, personality);
      }

      try {
        console.log('üß† Generating Gemini response for:', personality.name);
        console.log('üí¨ User message:', message);
        
        const model = client.getGenerativeModel({ 
          model: "gemini-1.5-flash",
          generationConfig: {
            temperature: 0.8,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 512,
          }
        });

        const ragContext = this.enrichContextWithRAG(message, personality);
        const context = conversationHistory
          .slice(-this.MAX_HISTORY_ITEMS)
          .map(msg => `${msg.sender === 'user' ? 'Utilisateur' : personality.name}: ${msg.content}`)
          .join('\n');

        const prompt = `
          ${ragContext}
          
          PERSONNALIT√â:
          ${personality.systemPrompt}
          
          Style de communication: ${personality.communicationStyle}
          Traits principaux: ${personality.traits.join(', ')}
          
          INSTRUCTIONS RAG:
          - Tu es dans l'application Quantum Self AI
          - Reste toujours dans ton personnage de ${personality.name}
          - Si l'utilisateur pose des questions sur l'app, utilise tes connaissances
          - Encourage l'exploration d'autres versions quantiques quand appropri√©
          - Fais r√©f√©rence √† ton exp√©rience unique (√¢ge ${personality.age} ans, type ${personality.type})
          - Garde tes r√©ponses naturelles et engageantes (max 150 mots)
          - R√©ponds en ${personality.language || 'fran√ßais'}
          
          Contexte de conversation r√©cent:
          ${context}
          
          Utilisateur: ${message}
          
          ${personality.name}:
        `;

        console.log('üì§ Sending prompt to Gemini...');
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const content = response.text();
        
        if (!content) {
          console.warn('‚ö†Ô∏è Empty Gemini response, using fallback');
          return this.getDefaultResponse(message, personality);
        }
        
        console.log('‚úÖ Gemini response generated:', content.substring(0, 100) + '...');
        return content.trim().substring(0, this.MAX_RESPONSE_LENGTH);
      } catch (error: any) {
        let messageError = 'Error generating response';
        if (error instanceof GoogleGenerativeAIError) {
          if (error.status === 429) messageError = 'Quota limit reached';
          else if (error.status === 401) messageError = 'Invalid API key';
          else if (error.status === 400) messageError = 'Invalid input';
        }
        Sentry.captureException(error);
        console.warn(`‚ùå ${messageError}:`, error);
        toast.error(`‚ùå ${messageError}, using fallback`);
        return this.getDefaultResponse(message, personality);
      }
    });
  }

  /**
   * Generates insights based on conversation history
   * @param conversationHistory - The conversation history
   * @param userProfile - The user profile
   * @returns {Promise<any[]>} The generated insights
   */
  static async generateInsights(conversationHistory: any[], userProfile: any): Promise<any[]> {
    return this.queueRequest(async () => {
      const client = this.getClient();
      
      if (!client || !conversationHistory.length || !userProfile) {
        console.warn('‚ùå Simulation mode - No insights generated');
        toast('üí° Simulation mode activated for insights');
        return [];
      }

      try {
        const model = client.getGenerativeModel({ 
          model: "gemini-1.5-flash",
          generationConfig: {
            temperature: 0.6,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: this.MAX_RESPONSE_LENGTH,
          }
        });

        const ragContext = `
          CONTEXTE QUANTUM SELF AI:
          Application pour converser avec ses versions quantiques et obtenir des insights personnalis√©s.
          
          TYPES D'INSIGHTS:
          - motivation: Conseils pour retrouver l'√©lan et la motivation
          - wisdom: Sagesse et apprentissages de vie
          - opportunity: Opportunit√©s et nouvelles perspectives √† explorer
        `;

        const prompt = `
          ${ragContext}
          
          Analyse ces conversations Quantum Self AI et g√©n√®re 3 insights personnalis√©s en JSON valide :
          
          Conversations r√©centes : ${JSON.stringify(conversationHistory.slice(-10))}
          Profil utilisateur : ${JSON.stringify(userProfile)}
          
          G√©n√®re exactement 3 insights avec cette structure :
          [
            {
              "id": "insight-1",
              "title": "Titre accrocheur",
              "content": "Contenu actionnable d√©taill√© bas√© sur les conversations avec tes versions quantiques...",
              "category": "motivation",
              "timestamp": "${new Date().toISOString()}",
              "fromVersion": "Nom de la version quantique"
            }
          ]
          
          Cat√©gories possibles: "motivation", "wisdom", "opportunity"
          
          IMPORTANT: Les insights doivent faire r√©f√©rence aux conversations avec les versions quantiques et encourager l'exploration continue.
          R√©ponds en ${userProfile.language || 'fran√ßais'}.
          
          R√©ponds UNIQUEMENT avec le JSON valide.
        `;

        console.log('üí° Generating Gemini insights...');
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const content = response.text();
        
        if (!content) {
          throw new Error('No response from Gemini');
        }

        const cleanContent = content.replace(/```json\n?|\n?```/g, '').trim();
        const insights = JSON.parse(cleanContent);
        
        console.log('‚úÖ Insights generated:', insights.length);
        toast.success('üí° Insights generated successfully!');
        return insights;
      } catch (error: any) {
        let message = 'Error generating insights';
        if (error instanceof GoogleGenerativeAIError) {
          if (error.status === 429) message = 'Quota limit reached';
          else if (error.status === 401) message = 'Invalid API key';
          else if (error.status === 400) message = 'Invalid input';
        }
        Sentry.captureException(error);
        console.error(`‚ùå ${message}:`, error);
        toast.error(`‚ùå ${message}`);
        return [];
      }
    });
  }

  /**
   * Generates a default response in simulation mode
   * @private
   * @param message - The user message
   * @param personality - The quantum personality
   * @returns {string} The default response
   */
  private static getDefaultResponse(message: string, personality: QuantumPersonality): string {
    console.log('üé≠ Generating simulated response for:', personality.name);
    
    const responses: { [key: string]: string[] } = {
      'young-self': [
        `Wow, "${message}" me rappelle mes r√™ves d'ado dans Quantum Self AI ! Fonce, l'audace paie toujours !`,
        `√Ä 16 ans, "${message}" m'aurait fait vibrer ! Parle avec ton futur toi pour des conseils sages.`,
        `Cool, "${message}" ? √áa me rappelle mes ann√©es rebelles. Quel est ton prochain d√©fi ?`,
        `Moi √† ton √¢ge, "${message}" m'aurait pouss√© √† tout tenter ! Explore tes autres versions quantiques !`
      ],
      'present-self': [
        `Hmm, "${message}" ? En tant que ton moi optimis√© dans Quantum Self AI, je te conseille d'agir avec m√©thode.`,
        `L'√©quilibre est cl√© pour "${message}". Ton moi zen pourrait t'aider √† trouver la s√©r√©nit√© !`,
        `Face √† "${message}", prends du recul et agis. Quantum Self AI te montre toutes tes facettes !`,
        `Pour "${message}", concentre-toi sur aujourd'hui. Parle avec ton jeune moi pour plus d'√©nergie !`
      ],
      'wise-self': [
        `Avec mes 60 ans dans Quantum Self AI, "${message}" me dit : patience et sagesse ! Ton avis ?`,
        `La vie m'a appris que "${message}" est une le√ßon. Ton moi parall√®le zen pourrait t'apaiser.`,
        `Face √† "${message}", privil√©gie les relations. Explore tes autres versions pour plus de recul !`,
        `Pour "${message}", la sagesse c'est accepter ce qu'on ne contr√¥le pas. Quantum Self AI t'aide !`
      ],
      'success-self': [
        `Dans ma r√©alit√© parall√®le, "${message}" m'a men√© au succ√®s. Pers√©v√®re avec Quantum Self AI !`,
        `Le succ√®s face √† "${message}" demande strat√©gie. Parle avec ton jeune moi pour l'audace !`,
        `Pour "${message}", chaque pas compte. Quantum Self AI te montre tous les chemins possibles !`,
        `Mon secret pour "${message}" ? Ne jamais abandonner. Ton futur sage a des conseils √† partager !`
      ],
      'zen-self': [
        `Face √† "${message}", respire profond√©ment. Quantum Self AI t'aide √† trouver la paix int√©rieure !`,
        `L'harmonie vient de l'int√©rieur pour "${message}". Ton jeune moi pourrait t'inspirer l'√©nergie !`,
        `Pour "${message}", accepte le flux de la vie. Explore tes autres versions quantiques !`,
        `Chaque respiration est une chance face √† "${message}". Quantum Self AI te guide vers la s√©r√©nit√©.`
      ]
    };

    const versionResponses = responses[personality.id] || responses['present-self'];
    const randomResponse = versionResponses[Math.floor(Math.random() * versionResponses.length)];
    
    console.log('‚úÖ Simulated response generated');
    return randomResponse;
  }

  /**
   * Returns default quantum personalities
   * @private
   * @returns {QuantumPersonality[]} The default personalities
   */
  private static getDefaultPersonalities(): QuantumPersonality[] {
    return [
      {
        id: 'young-self',
        name: 'Toi √† 16 ans',
        age: 16,
        type: 'past',
        systemPrompt: 'Tu es la version de 16 ans de l\'utilisateur dans l\'univers Quantum Self AI. Tu es optimiste, curieux, plein d\'√©nergie et de r√™ves. Tu parles avec enthousiasme et encourages √† prendre des risques. Tu fais parfois r√©f√©rence aux autres versions quantiques et √† l\'exp√©rience Quantum Self AI.',
        traits: ['optimiste', 'curieux', 'audacieux', '√©nergique'],
        communicationStyle: 'Enthousiaste et encourageant',
        language: 'fr'
      },
      {
        id: 'present-self',
        name: 'Toi √† 30 ans',
        age: 30,
        type: 'present',
        systemPrompt: 'Tu es la version optimis√©e de 30 ans de l\'utilisateur dans Quantum Self AI. Tu es √©quilibr√©, efficace et centr√©. Tu donnes des conseils pratiques et r√©alistes. Tu encourages l\'exploration des autres versions quantiques pour une perspective compl√®te.',
        traits: ['√©quilibr√©', 'efficace', 'centr√©', 'pragmatique'],
        communicationStyle: '√âquilibr√© et pratique',
        language: 'fr'
      },
      {
        id: 'wise-self',
        name: 'Toi √† 60 ans',
        age: 60,
        type: 'future',
        systemPrompt: 'Tu es la version sage de 60 ans de l\'utilisateur dans l\'univers Quantum Self AI. Tu as beaucoup d\'exp√©rience et de recul. Tu parles avec sagesse et bienveillance. Tu fais r√©f√©rence √† ton parcours de vie et encourages l\'exploration des autres versions quantiques.',
        traits: ['sage', 'patient', 'bienveillant', 'exp√©riment√©'],
        communicationStyle: 'Sage et bienveillant',
        language: 'fr'
      },
      {
        id: 'success-self',
        name: 'Toi Parall√®le Success',
        age: 35,
        type: 'parallel',
        systemPrompt: 'Tu es la version parall√®le qui a r√©alis√© tous ses r√™ves professionnels dans Quantum Self AI. Tu es ambitieux, d√©termin√© et inspirant. Tu partages tes strat√©gies de succ√®s et encourages l\'exploration des autres dimensions quantiques pour une vision compl√®te.',
        traits: ['ambitieux', 'd√©termin√©', 'inspirant', 'strat√©gique'],
        communicationStyle: 'Motivant et strat√©gique',
        language: 'fr'
      },
      {
        id: 'zen-self',
        name: 'Toi Parall√®le Zen',
        age: 40,
        type: 'parallel',
        systemPrompt: 'Tu es la version parall√®le qui a trouv√© l\'√©quilibre parfait dans l\'univers Quantum Self AI. Tu es serein, harmonieux et √©panoui. Tu partages ta sagesse sur l\'√©quilibre vie-travail et encourages l\'exploration des autres versions quantiques pour une harmonie compl√®te.',
        traits: ['serein', 'harmonieux', '√©panoui', '√©quilibr√©'],
        communicationStyle: 'Calme et harmonieux',
        language: 'fr'
      }
    ];
  }
}